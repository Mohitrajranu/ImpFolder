$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Jenkins Guide###############################################################################
[A]It supports master slave architecture.wherein master is involved in building jobs, dispatch build to the slaves for actual job execution ,monitor the slaves and record the build results.., can also build jobs directly.
[B]Slave task is to execute the build jobs dispatched by the master.Jenkins runs a seperate program called "slave agent" on slaves. When slaves are registered to a master, a master starts distributing loads to slaves.Node is used to refer to all machines that are a part of jenkins grids ,slaves and master.
[C]Executor is a seperate stream of builds to be run on a node in parallel. A node can have one or more executors.
---------><------------------><------------------------------------><--------------------------------><---------------------------------><--------------><---------------------><----------
>- Create first jenkins job as freestyleProject,and follow all the listed steps as per your need. like adding a build script as shell.
>- Setting up Maven based jenkins.
>> Checkout Source code from github , Compile the code Run the test and package application.
--Ensure Git is installed on the server, Now configure github plugins->Go to Manage Jenkins and in the installed section check for it and if not found go to available section and download it.
>>Confgure Maven to Jenkins------->Go to to manage Jenkins----->Global Tool Configuration------>
------------------->
------------------->Create first maven based jenkins project.--->Get the project github repository URL https://github.com/Bizlem-Dev/bizlem-repos-dev.git
New Item--->Create new project--->FreestyleProject--->In the SCM section paste the github url. Add credentials ,Go to build part and configure maven goals.
Different phases in maven build lifecycle:-
>validate --->Validate the project is correct and all the necessary information is available.
>compile ---->Compile the source code of the project.
>test ----->Test the compiled source code using a suitable unit testing framework.
>package--->Take the compiled code and packaged it in its distributable format.
>verify---->Run any checks on results of integration tests to ensure quality criteria are met.
>install--->Install the package into the local repository ,for use as a dependency in other projects locally.
>deploy---->Copy the final package to the remote repository for sharing with other developers and projects.

------->>Now on the dashboard menu click on build name and after that select build Now--->Now in the console output check the logs.
----->>Configure Poll SCM on the build, Click maven-restful-project ---->choose Configure as option-------> *1 *2 *3 *4 *5--------->1=minute(0-59),2=hour(0-23),3=dayOfMonth(1-31),4=month(1-12),5=dayOfWeek(0-6)(Sunday=0)
Cron Syntax>>----> 0 0 * * * every day at midnight;; 0 2-4 * * * 2 am , 3 am ,4 am every day.

---------------------------------------------><-------------------------------------------------------><------------------------------------------------------><--------------------------
Generating SSH keys:- ssh-keygen -t rsa -b 4096 -C "your_email@emailId.com"
Adding your SSH key to the ssh-agent:- first ensure ssh-agent is enabled,
 eval "$(ssh-agent-s)"
Now add your SSH key to the ssh-agent,if you use an existing ssh-key instead of generating new one then replace id_rsa in your command with the name of the private key file.,
ssh-add ~/.ssh/id_rsa
Copy ssh-key to your clipboard, pbcopy < ~/.ssh/id_rsa.pub

Jenkins GitHub Plugin:
https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Plugin

Install checkstyle plugins,Manage plugins.,Now configure the build for checkstyle by writing the below text in the Goals section: clean package checkstyle:checkstyle. and add post build actions as publish checkstyle analysis reports.

PMD Jenkins plugin:
https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin

Findbugs Jenkins Plugin:
https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin

########################################################################################################################################################################################
Apache Ant:
http://ant.apache.org/

Ant Targets:
http://ant.apache.org/manual/targets.html

Gradle:
https://docs.gradle.org/current/dsl/index.html

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Now archive your build generated by maven by making an addition in post build action steps:- maven-restful-project---->configure----> Add post buildAction------>
Archive the artifacts----> **/*.war

------->>Install and configure tomcat as the staging environment. Now after installation the port should not be the same as that of jenkins server; now install the plugin copy artifact, and also deploy to container.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Now create a new item/project as deploy-to-staging as freestyleProject and scroll down to the build step===> Add a build step---->choose copy artifacts from another project, in the Project name field specify the previous project name which needs to be deployed,; In the field Artifacts to copy choose--->**/*.war 
 
Now add post build action---> Deploy war/ear to container -------->War/Ear files  ------->**/*.war then choose add container and save.

Now configure the upstream project to trigger our downstream project in our case upstream project is maven restful project, so go to configure----->Add post build actions ------> Build other projects and specify our downstream project here i.e; deploy-to-staging. Trigger only if build is stable. and now build the project.

***************************************************************************************************************************************************************
Jenkins:-PipeLine ------> Install plugin Build PipeLine.

click the + sign and write the viewName,

#######################################################################################################################

For the ones using Centos/Redhat, the option to disable the DNS Multicast feature can found in /etc/sysconfig/jenkins

JENKINS_JAVA_OPTIONS="-Dhudson.DNSMultiCast.disabled=true -Dhudson.udp=-1 -Djava.awt.headless=true"
########################################################################################################################
Modify JAVA_ARGS in /etc/default/jenkins (location for Debian / Ubuntu installations at least) to disable DNS multicast feature.

Change this: JAVA_ARGS="-Djava.awt.headless=true"

To this: JAVA_ARGS="-Djava.awt.headless=true -Dhudson.DNSMultiCast.disabled=true"

And restart the service service jenkins restart
########################################################################################################################
You can disable the logging of these DNS errors by adjusting the logging settings within Jenkins.

From the Jenkins web interface go to:

 Manage Jenkins -> System Log -> Log Levels (on the left)
Add the following entry:

Name: javax.jmdns

Level: off
This way you can keep the Multicast DNS feature but without all the logging data.

#########################################################################################################################
https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-ubuntu/

http://34.74.11.79:8086/login?from=%2F
###########################################################################JdkInstallation###################################################################################
Step 1: Add A Third Party PPA To Ubuntu
The easiest way to install Oracle Java JDK 8 on Ubuntu is via a third party PPA… To add that PPA, run the commands below

 sudo add-apt-repository ppa:webupd8team/java

After running the commands above, you should see a prompt to accept the PPA key onto Ubuntu… accept and continue

Continue below to install Java 8…

Step 2: Download Oracle Java 8 Installer
Now that the PPA repository has been added to Ubuntu, run the commands below to download Oracle Java 8 installer…. the installer should install the latest Java JDK 8 on your Ubuntu machines.

sudo apt update
sudo apt install oracle-java8-installer
When you run the commands above you’ll be prompted to access the license terms of the software… accept and continue..

Step 3: Configure Oracle JDK8 As Default
Set Oracle JDK8 as default, to do that, install the oracle-java8-set-default package. This will automatically set the JAVA env variable.

sudo apt install oracle-java8-set-default

The command above will automatically set Java 8 as the default… and that should complete your installation, you can check you java version by running following command.
javac -version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sudo apt-get remove --auto-remove maven
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Step 2 – Install Apache Maven on Ubuntu
After verifying java version on your system. Download Apache maven from its official website or use following command to download Apache Maven 3.5.4.

cd /usr/local
wget http://www-eu.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz
Now extract downloaded archive using following command.

sudo tar xzf apache-maven-3.5.4-bin.tar.gz
sudo ln -s apache-maven-3.5.4 apache-maven
Step 3 – Setup Environment Variables
As you have downloaded pre compiled Apache Maven files on your system. Now set the environments variables by creating new file /etc/profile.d/maven.sh.

sudo vi /etc/profile.d/apache-maven.sh
and add following content.

java-11-openjdk-amd64

export JAVA_HOME=/usr/lib/jvm/java-8-oracle
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export M2_HOME=/usr/local/apache-maven
export MAVEN_HOME=/usr/local/apache-maven
export PATH=${M2_HOME}/bin:${PATH}
Now load the environment variables in current shell using following command.

source /etc/profile.d/apache-maven.sh
Step 4 – Verify Installation
You have successfully installed and configured Apache Maven on your Ubuntu system. Use the following command to check the version of Maven.

mvn -version
Maven home: /usr/local/apache-maven

vi /etc/environment and configure it in the maven path.
sudo vi /etc/init.d/jenkins

sudo update-alternatives --config java
#############################################################################################################################################################################
Setting Up bash_profile.++\++++++\++++++++++++++\++++++++++++\++++++++++++++\++++++++++++++\+++++++++++++++///////////////////////////////////////////
source ~/.profile
vi .profile


# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin if it exists
# User Specific environments and startup programs
cd ~
HOME=`pwd`
JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export JAVA_HOME
PATH=$JAVA_HOME:$PATH:$HOME/bin
export PATH
MAVEN_HOME="/usr/local/apache-maven"
export MAVEN_HOME
export PATH=$MAVEN_HOME/bin/:$PATH
set alias dos2unix="sed -i -e 's/'\"\$(printf '\015')\"'//g' "
cls()
{
    clear
}
ulimit -c unlimited

##############################################################################################################################################################################
https://labs.tadigital.com/index.php/2017/11/29/build-automation-and-deployment-of-aem-using-jenkins/
################################################################################################################################################################################
Install jenkins on ubuntu server from below link
https://tecadmin.net/install-jenkins-in-ubuntu/
and open the port 8086 after configuring it on Google cloud Platform.

cd /var/lib/jenkins
cd /etc/default/
vim jenkins
HTTP_PORT=8086
sudo service jenkins stop
sudo service jenkins start
sudo service jenkins restart

Project build path:
/var/lib/jenkins/workspace

cd /var/lib/jenkins/secrets
vim initialAdminPassword
e8ebe8960a084bdcaaa421a46503c42c

http://35.186.166.22:8086 -------------Jenkins Server Address

http://35.186.166.22:8086/login?from=%2F
#####################################################################################################################################################################################
http://35.186.166.22:8086/Jenkins_Build -------don't use it.
#################################################################################UserCredentials######################################################################################
Bizlem-admin----------username.
B!z|e/\/\@d^^!n-------password.
admin-----------------fullname.
abhishek.tayshete@bizlem.com--email.
34.74.11.79 , applicationtestserver
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Docker Container Credentials:
DockDevMohit ---username dockdevmohit
B!z|e/\/\@d^^!n-------password.
mohit.raj@bizlem.com-email

dockhubRepoProj--Repo Name
docker build -t dockdevmohit/dockhubrepoproj .
docker push dockdevmohit/dockhubrepoproj
docker pull dockdevmohit/dockhubrepoproj
docker run -d -p 8078:8078 dockdevmohit/dockhubrepoproj
Example:https://howtodoinjava.com/docker/docker-hello-world-example/

(1) Set up the docker repository

sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
(2) Install Docker CE

sudo apt-get update
sudo apt-get install docker-ce
(3) Verify the installation

sudo docker run hello-world


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
***********************************************************####################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Submitting a patch to the Sling Site project
Create a Git patch:
Locally check out the git repository.
Edit the documentation, don't commit.
From the command line git diff > site.patch.
Submit your changes:
Navigate to the Jira issue tracker.
Create an account and/or login.
Create a ticket, enter a description and choose Documentation for Components.
Select the ticket, click more, select attach files and attach your Git patch.
Additionally there is a Github hosted Apache Sling Site Project Mirror which can be used to submit changes as well.

Submitting a pull request to the GitHub Sling Site mirror
Create the Pull Request:
Navigate to the Apache Sling Site Project Mirror.
Create an account and/or login.
Edit the documentation using the edit icon Fork this project and edit this file.
Once all changes are done click New pull request.
Select base fork:apache/sling-site base:master as the project to push to
