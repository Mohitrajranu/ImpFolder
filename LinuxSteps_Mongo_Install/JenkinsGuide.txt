$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Jenkins Guide###############################################################################
[A]It supports master slave architecture.wherein master is involved in building jobs, dispatch build to the slaves for actual job execution ,monitor the slaves and record the build results.., can also build jobs directly.
[B]Slave task is to execute the build jobs dispatched by the master.Jenkins runs a seperate program called "slave agent" on slaves. When slaves are registered to a master, a master starts distributing loads to slaves.Node is used to refer to all machines that are a part of jenkins grids ,slaves and master.
[C]Executor is a seperate stream of builds to be run on a node in parallel. A node can have one or more executors.
---------><------------------><------------------------------------><--------------------------------><---------------------------------><--------------><---------------------><----------
>- Create first jenkins job as freestyleProject,and follow all the listed steps as per your need. like adding a build script as shell.
>- Setting up Maven based jenkins.
>> Checkout Source code from github , Compile the code Run the test and package application.
--Ensure Git is installed on the server, Now configure github plugins->Go to Manage Jenkins and in the installed section check for it and if not found go to available section and download it.
>>Confgure Maven to Jenkins------->Go to to manage Jenkins----->Global Tool Configuration------>
------------------->
------------------->Create first maven based jenkins project.--->Get the project github repository URL https://github.com/Bizlem-Dev/bizlem-repos-dev.git
New Item--->Create new project--->FreestyleProject--->In the SCM section paste the github url. Add credentials ,Go to build part and configure maven goals.
Different phases in maven build lifecycle:-
>validate --->Validate the project is correct and all the necessary information is available.
>compile ---->Compile the source code of the project.
>test ----->Test the compiled source code using a suitable unit testing framework.
>package--->Take the compiled code and packaged it in its distributable format.
>verify---->Run any checks on results of integration tests to ensure quality criteria are met.
>install--->Install the package into the local repository ,for use as a dependency in other projects locally.
>deploy---->Copy the final package to the remote repository for sharing with other developers and projects.

------->>Now on the dashboard menu click on build name and after that select build Now--->Now in the console output check the logs.
----->>Configure Poll SCM on the build, Click maven-restful-project ---->choose Configure as option-------> *1 *2 *3 *4 *5--------->1=minute(0-59),2=hour(0-23),3=dayOfMonth(1-31),4=month(1-12),5=dayOfWeek(0-6)(Sunday=0)
Cron Syntax>>----> 0 0 * * * every day at midnight;; 0 2-4 * * * 2 am , 3 am ,4 am every day.

---------------------------------------------><-------------------------------------------------------><------------------------------------------------------><--------------------------
Generating SSH keys:- ssh-keygen -t rsa -b 4096 -C "your_email@emailId.com"
Adding your SSH key to the ssh-agent:- first ensure ssh-agent is enabled,
 eval "$(ssh-agent-s)"
Now add your SSH key to the ssh-agent,if you use an existing ssh-key instead of generating new one then replace id_rsa in your command with the name of the private key file.,
ssh-add ~/.ssh/id_rsa
Copy ssh-key to your clipboard, pbcopy < ~/.ssh/id_rsa.pub

Jenkins GitHub Plugin:
https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Plugin

Install checkstyle plugins,Manage plugins.,Now configure the build for checkstyle by writing the below text in the Goals section: clean package checkstyle:checkstyle. and add post build actions as publish checkstyle analysis reports.

PMD Jenkins plugin:
https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin

Findbugs Jenkins Plugin:
https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin

########################################################################################################################################################################################
Apache Ant:
http://ant.apache.org/

Ant Targets:
http://ant.apache.org/manual/targets.html

Gradle:
https://docs.gradle.org/current/dsl/index.html

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Now archive your build generated by maven by making an addition in post build action steps:- maven-restful-project---->configure----> Add post buildAction------>
Archive the artifacts----> **/*.war

------->>Install and configure tomcat as the staging environment. Now after installation the port should not be the same as that of jenkins server; now install the plugin copy artifact, and also deploy to container.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Now create a new item/project as deploy-to-staging as freestyleProject and scroll down to the build step===> Add a build step---->choose copy artifacts from another project, in the Project name field specify the previous project name which needs to be deployed,; In the field Artifacts to copy choose--->**/*.war 
 
Now add post build action---> Deploy war/ear to container -------->War/Ear files  ------->**/*.war then choose add container and save.

Now configure the upstream project to trigger our downstream project in our case upstream project is maven restful project, so go to configure----->Add post build actions ------> Build other projects and specify our downstream project here i.e; deploy-to-staging. Trigger only if build is stable. and now build the project.

***************************************************************************************************************************************************************
Jenkins:-PipeLine ------> Install plugin Build PipeLine.

click the + sign and write the viewName,

#######################################################################################################################

For the ones using Centos/Redhat, the option to disable the DNS Multicast feature can found in /etc/sysconfig/jenkins

JENKINS_JAVA_OPTIONS="-Dhudson.DNSMultiCast.disabled=true -Dhudson.udp=-1 -Djava.awt.headless=true"
########################################################################################################################
Modify JAVA_ARGS in /etc/default/jenkins (location for Debian / Ubuntu installations at least) to disable DNS multicast feature.

Change this: JAVA_ARGS="-Djava.awt.headless=true"

To this: JAVA_ARGS="-Djava.awt.headless=true -Dhudson.DNSMultiCast.disabled=true"

And restart the service service jenkins restart
########################################################################################################################
You can disable the logging of these DNS errors by adjusting the logging settings within Jenkins.

From the Jenkins web interface go to:

 Manage Jenkins -> System Log -> Log Levels (on the left)
Add the following entry:

Name: javax.jmdns

Level: off
This way you can keep the Multicast DNS feature but without all the logging data.

#########################################################################################################################